 # Copyright (c) 2025  Analog Devices Inc
 
set(STM32CLT_PATH $ENV{STM32CLT_PATH})
# Set default toolchain path, target and ldf file. User can override on command line
if(NOT DEFINED TOOLCHAIN)
  set(TOOLCHAIN "gcc-arm-none-eabi" CACHE STRING "Toolchain to use")
endif()
if(EVB MATCHES "app_mcu_h5")
  include(${CMAKE_CURRENT_LIST_DIR}/st_tools.cmake)
  set(TARGET_FLAGS "-mcpu=cortex-m33 -mfpu=fpv4-sp-d16 -mfloat-abi=hard " CACHE STRING "Target flags")
  if(TOOLCHAIN MATCHES "armclang")
    set(LD_FILE "${CMAKE_CURRENT_LIST_DIR}/../stm/app_mcu_h5/armclang_gen_code/stm32h573xx_flash.sct" CACHE FILEPATH "Linker script")
    set(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS} --cpu=Cortex-M33")
  elseif(TOOLCHAIN MATCHES "gcc-arm-none-eabi")
    set(LD_FILE "${CMAKE_CURRENT_LIST_DIR}/../stm/app_mcu_h5/stm_gen_code/STM32H573xx_FLASH.ld" CACHE FILEPATH "Linker script")
  endif()
elseif(EVB MATCHES "nucleo_h563zi")
  include(${CMAKE_CURRENT_LIST_DIR}/st_tools.cmake)
  set(TARGET_FLAGS "-mcpu=cortex-m33 -mfpu=fpv4-sp-d16 -mfloat-abi=hard " CACHE STRING "Target flags")
  if(TOOLCHAIN MATCHES "armclang")
    set(LD_FILE "${CMAKE_CURRENT_LIST_DIR}/../stm/nucleo_h563zi_master/armclang_gen_code/stm32h563xx_flash.sct" CACHE FILEPATH "Linker script")
    set(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS} --cpu=Cortex-M33")
  elseif(TOOLCHAIN MATCHES "gcc-arm-none-eabi")
    set(LD_FILE "${CMAKE_CURRENT_LIST_DIR}/../stm/nucleo_h563zi_master/stm_gen_code/STM32H563ZITX_FLASH.ld" CACHE FILEPATH "Linker script")
  endif()
elseif(EVB MATCHES "eval_ade9178")
  include(${CMAKE_CURRENT_LIST_DIR}/max_tools.cmake)
  set(TARGET_FLAGS "-mcpu=cortex-m4 -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16 -D__MICROLIB" CACHE STRING "Target flags")
  if(TOOLCHAIN MATCHES "armclang")
    set(LD_FILE "${CMAKE_CURRENT_LIST_DIR}/../max/${EVB}/armclang_gen_code/max32670.sct" CACHE FILEPATH "Linker script")
    set(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS} --cpu=Cortex-M4.fp.sp --library_type=microlib")
    set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} --pd=\"__MICROLIB SETA 1\"")
  elseif(TOOLCHAIN MATCHES "gcc-arm-none-eabi")
    set(LD_FILE "${CMAKE_CURRENT_LIST_DIR}/../max/${EVB}/max32670.ld" CACHE FILEPATH "Linker script")
  endif()
elseif(EVB MATCHES "app_mcu_h7")
  include(${CMAKE_CURRENT_LIST_DIR}/st_tools.cmake)
  set(LD_FILE "${BOARD_SUPPORT_DIR}/stm/app_mcu_h7/stm_gen_code/app_mcu_h7.sct" CACHE FILEPATH "Linker script")
  set(TARGET_FLAGS "-mcpu=cortex-m7 -mfpu=fpv5-d16 -mfloat-abi=hard " CACHE STRING "Target flags")
  if(TOOLCHAIN MATCHES "armclang")
    set(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS} --cpu Cortex-M7.fp.dp")
  endif()
elseif(EVB MATCHES "dummy_board" OR EVB MATCHES "x86")
  include(${CMAKE_CURRENT_LIST_DIR}/gcc_tools.cmake)
  set(TOOLCHAIN "gcc")
else()
	message("Unsupported EVB")
endif()


if(TOOLCHAIN MATCHES "armclang")
  include(${CMAKE_CURRENT_LIST_DIR}/armclang.cmake)
elseif(TOOLCHAIN MATCHES "iar")
  include(${CMAKE_CURRENT_LIST_DIR}/iar.cmake)
elseif (TOOLCHAIN STREQUAL "gcc")
  message("use gcc toolchain")
else()
  set(TOOLCHAIN "gcc-arm-none-eabi")
  #Default to gcc-arm-none-eabi if no specific toolchain is set
  include(${CMAKE_CURRENT_LIST_DIR}/gcc-arm-none-eabi.cmake)
endif()
# Setup compiler settings
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS ON)
# Enable compile command to ease indexing with e.g. clangd
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)
# Enable CMake support for ASM and C languages
enable_language(C ASM)


message(STATUS "EVB: ${EVB}")
message(STATUS "LD: ${LD_FILE}")
message(STATUS "Toolchain: ${TOOLCHAIN_PATH},${TOOLCHAIN}")
message(STATUS "Binary output path: ${CMAKE_CURRENT_BINARY_DIR}")
message(STATUS "cmake c flags: ${CMAKE_C_FLAGS}")
message(STATUS "cmake asm flags: ${CMAKE_ASM_FLAGS}")
message(STATUS "cmake link flags: ${CMAKE_C_LINK_FLAGS}")